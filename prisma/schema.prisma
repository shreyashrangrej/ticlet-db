generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ClientUser {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  firstName      String
  lastName       String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  comments       Comment[]
  createdTickets Ticket[]  @relation(name: "ticketCreatedBy")
}

model SupportUser {
  id              Int         @id @default(autoincrement())
  email           String      @unique
  firstName       String
  lastName        String
  userType        UserType    @default(support)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  role            Role        @relation(fields: [roleId], references: [id])
  roleId          Int
  comments        Comment[]
  expertises      Expertise[]
  assignedTickets Ticket[]    @relation(name: "ticketAssignedTo")
}

model Expertise {
  id        Int           @id @default(autoincrement())
  name      String        @unique
  users     SupportUser[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Ticket {
  id           Int            @id @default(autoincrement())
  title        String
  description  String
  status       TicketStatus   @default(Open)
  priority     TicketPriority @default(Low)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  comments     Comment[]
  project      Project        @relation(fields: [projectId], references: [id])
  projectId    Int
  category     Category       @relation(fields: [categoryId], references: [id])
  categoryId   Int
  attachments  Attachment[]
  createdBy    ClientUser     @relation(fields: [createdById], references: [id], name: "ticketCreatedBy")
  createdById  Int
  assignedTo   SupportUser    @relation(fields: [assignedToId], references: [id], name: "ticketAssignedTo")
  assignedToId Int
}

model Attachment {
  id        Int      @id @default(autoincrement())
  fileName  String
  fileUrl   String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  ticketId  Int
  createdAt DateTime @default(now())
}

model Comment {
  id            Int         @id @default(autoincrement())
  text          String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  ticket        Ticket      @relation(fields: [ticketId], references: [id])
  ticketId      Int
  clientUser    ClientUser  @relation(fields: [clientUserId], references: [id])
  clientUserId  Int
  supportUser   SupportUser @relation(fields: [supportUserId], references: [id])
  supportUserId Int
}

model Project {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  tickets    Ticket[]
  categories Category[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  projects  Project[]
  tickets   Ticket[]
}

model Role {
  id        Int           @id @default(autoincrement())
  name      String        @unique
  users     SupportUser[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum UserType {
  agent
  support
  manager
  administrator
}

enum TicketStatus {
  Open
  Pending
  InProgress
  OnHold
  Solved
  Closed
  Reopened
  Canceled
}

enum TicketPriority {
  Low
  Medium
  High
  Urgent
}
